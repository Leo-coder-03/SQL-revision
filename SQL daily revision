1. Display all the allergies ordering them in descending order based on their popularity, also avoid null.
SELECT DISTINCT(allergies),COUNT(*) as total_diagnosis FROM patients WHERE allergies IS NOT NULL  GROUP BY allergies ORDER BY total_diagnosis DESC; 

2.Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date.
SELECT first_name,last_name,birth_date FROM patients WHERE year(birth_date) BETWEEN 1970 AND 1979 ORDER BY birth_date ASC;

3.We want to display each patient's full name in a single column. Their last_name in all upper letters must appear first, then first_name in all lower case letters. Separate the last_name and first_name with a comma. Order the list by the first_name in decending order
SELECT CONCAT(UPPER(last_name) , ',',LOWER(first_name)) FROM patients ORDER BY first_name DESC;

4.Show the province_id(s), sum of height; where the total sum of its patient's height is greater than or equal to 7,000.
SELECT province_id , SUM(height) FROM patients GROUP BY province_id HAVING SUM(height) >= 7000;(We use having with agggregate methods)

5.Show the difference between the largest weight and smallest weight for patients with the last name 'Maroni'
SELECT MAX(weight) - MIN(weight) FROM patients WHERE last_name = 'Maroni';

6.Show all of the days of the month (1-31) and how many admission_dates occurred on that day. Sort by the day with most admissions to least admissions.
SELECT DAY(admission_date) AS day_of_month, COUNT(*) AS admissions_count FROM admissions GROUP BY day_of_month ORDER BY admissions_count DESC;

7.For every admission, display the patient's full name, their admission diagnosis, and their doctor's full name who diagnosed their problem.
SELECT 
    CONCAT(p.first_name, ' ', p.last_name) AS patient_full_name,
    a.diagnosis,
    CONCAT(d.first_name, ' ', d.last_name) AS doctor_full_name
FROM 
    admissions a
JOIN 
    patients p ON a.patient_id = p.patient_id
JOIN 
    doctors d ON a.attending_doctor_id = d.doctor_id;
8.display the first name, last name and number of duplicate patients based on their first name and last name.
Ex: A patient with an identical name can be considered a duplicate.
SELECT  first_name, last_name, COUNT(*) AS duplicate_count FROM patients GROUP BY first_name, last_name HAVING COUNT(*) > 1;
9.Display patient's full name,
height in the units feet rounded to 1 decimal,
weight in the unit pounds rounded to 0 decimals,
birth_date,
gender non abbreviated.
Convert CM to feet by dividing by 30.48.
Convert KG to pounds by multiplying by 2.205.
SELECT CONCAT(first_name,' ',last_name) AS patient_name,ROUND(height/30.48,1) as height,ROUND(weight*2.205,0) AS weight,birth_date,CASE WHEN gender = 'M' THEN 'MALE' WHEN gender = 'F' THEN 'FEMALE' END AS gender FROM patients;
10. Show patient_id, first_name, last_name from patients whose does not have any records in the admissions table. (Their patient_id does not exist in any admissions.patient_id rows.)
SELECT p.patient_id,p.first_name,p.last_name FROM patients p LEFT JOIN admissions a ON p.patient_id = a.patient_id WHERE a.patient_id IS NULL; 
11. Display a single row with max_visits, min_visits, average_visits where the maximum, minimum and average number of admissions per day is calculated. Average is rounded to 2 decimal places.
WITH daily_visits AS (SELECT admission_date,COUNT(*) as patient_count_per_day FROM admissions GROUP BY admission_date)
SELECT MAX(patient_count_per_day) AS max_visits, MIN(patient_count_per_day) AS min_visits, ROUND(AVG(patient_count_per_day),2) FROM daily_visits;
12. Show all of the patients grouped into weight groups.
Show the total amount of patients in each weight group.
Order the list by the weight group decending.
For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc.
With normalisedWeight AS (SELECT patient_id , Floor(weight/10)*10 AS weightGrp FROM patients)
SELECT COUNT(*) AS patients_in_group,weightGrp AS weight_group FROM normalisedWeight GROUP BY weightGrp ORDER BY weightGrp DESC;
13. Show patient_id, weight, height, isObese from the patients table.
Display isObese as a boolean 0 or 1.
Obese is defined as weight(kg)/(height(m)2) >= 30.
weight is in units kg.
height is in units cm.
WITH Obese AS (SELECT patient_id,weight,height,(weight/POWER(height / 100.0, 2)) as obesity FROM patients)
SELECT patient_id,weight,height,CASE WHEN (obesity>=30)THEN 1 ELSE 0 END as isObese FROM Obese;
14. Show patient_id, first_name, last_name, and attending doctor's specialty.
Show only the patients who has a diagnosis as 'Epilepsy' and the doctor's first name is 'Lisa'
Check patients, admissions, and doctors tables for required information.
SELECT p.patient_id,p.first_name,p.last_name,d.specialty FROM patients p JOIN admissions a On p.patient_id = a.patient_id JOIN doctors d ON a.attending_doctor_id=
d.doctor_id WHERE a.diagnosis = 'Epilepsy' AND d.first_name = 'Lisa';
15. All patients who have gone through admissions, can see their medical documents on our site. Those patients are given a temporary password after their first admission. Show the patient_id and temp_password.
The password must be the following, in order:
1. patient_id
2. the numerical length of patient's last_name
3. year of patient's birth_date
SELECT DISTINCT(p.patient_id),CONCAT(p.patient_id,LENGTH(p.last_name),YEAR(birth_date)) AS temp_password FROM patients p JOIN admissions a ON p.patient_id = a.patient_id;
